[{"/Users/oliver/Documents/Code/dice-roller/src/index.js":"1","/Users/oliver/Documents/Code/dice-roller/src/App.js":"2"},{"size":220,"mtime":1609300162171,"results":"3","hashOfConfig":"4"},{"size":6044,"mtime":1609809416998,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"8wcdgh",{"filePath":"9","messages":"10","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/Users/oliver/Documents/Code/dice-roller/src/index.js",[],["12","13"],"/Users/oliver/Documents/Code/dice-roller/src/App.js",["14"],"import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Input from \"@material-ui/core/Input\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CasinoIcon from \"@material-ui/icons/Casino\";\nimport LooksOneRoundedIcon from \"@material-ui/icons/LooksOneRounded\";\nimport LooksTwoRoundedIcon from \"@material-ui/icons/LooksTwoRounded\";\nimport Looks3RoundedIcon from \"@material-ui/icons/Looks3Rounded\";\nimport Looks4RoundedIcon from \"@material-ui/icons/Looks4Rounded\";\nimport Looks5RoundedIcon from \"@material-ui/icons/Looks5Rounded\";\nimport Looks6RoundedIcon from \"@material-ui/icons/Looks6Rounded\";\nimport ForwardIcon from \"@material-ui/icons/Forward\";\nimport { IconButton } from \"@material-ui/core\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { TimerOutlined } from \"@material-ui/icons\";\n\nconst BUTTONS = [\n  <LooksOneRoundedIcon />,\n  <LooksTwoRoundedIcon />,\n  <Looks3RoundedIcon />,\n  <Looks4RoundedIcon />,\n  <Looks5RoundedIcon />,\n  <Looks6RoundedIcon />,\n];\n\nconst useStyles = makeStyles({\n  root: {\n    width: 375,\n    margin: 10,\n  },\n  input: {\n    width: 42,\n  },\n});\n\nfunction ResultCard(props) {\n  const classes = useStyles();\n  const result = props.result;\n  const num = props.num;\n  const cum_results = result.map((count, i) =>\n    result.slice(i).reduce((a, b) => a + b)\n  );\n  return (\n    <div {...props}>\n      <Card className={classes.root}>\n        <CardContent>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={3}>\n              <Typography>Dice Rolls</Typography>\n            </Grid>\n            <Grid item xs={1}></Grid>\n            <Grid item xs={6}>\n              <Typography>Success/Failure</Typography>\n            </Grid>\n            <Grid item xs={1}>\n              <Typography>#{num}</Typography>\n            </Grid>\n          </Grid>\n\n          {result.map((count, i) => (\n            <Grid container spacing={2} alignItems=\"center\">\n              <Grid item xs={1}>\n                <Typography align=\"right\">\n                  {count > 0 ? parseInt(count) + \"x\" : \"\"}\n                </Typography>\n              </Grid>\n              <Grid item xs={1}>\n                {BUTTONS[i]}\n              </Grid>\n              <Grid item xs={2}></Grid>\n              <Grid item xs={3}>\n                {BUTTONS[i]}\n                {i < 5 ? BUTTONS[5] : \"\"}\n              </Grid>\n              <Grid item xs={3}>\n                <Typography>\n                  {cum_results[i]}s ({cum_results[0] - cum_results[i]}f)\n                </Typography>\n              </Grid>\n              <Grid item xs={1}>\n                {cum_results[i] === 0 ? (\n                  \"\"\n                ) : (\n                  <IconButton\n                    color=\"primary\"\n                    onClick={() => props.setDice(cum_results[i])}\n                  >\n                    <ForwardIcon />\n                  </IconButton>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction DiceRoller() {\n  const classes = useStyles();\n\n  const [dice, setDice] = useState(10);\n\n  const handleSliderChange = (event, newValue) => {\n    setDice(newValue);\n  };\n\n  const handleInputChange = (event) => {\n    setDice(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const [result, setResult] = useState([]);\n  const [num, setNum] = useState(0);\n\n  const rollDice = () => {\n    setResult([]);\n    setTimeout(() => {\n      let rresult = [0, 0, 0, 0, 0, 0];\n      for (let index = 0; index < dice; index++) {\n        let roll = Math.floor(Math.random() * 6) + 1;\n        rresult[roll - 1]++;\n      }\n      setResult(rresult);\n      setNum(num + 1);\n    }, 200);\n  };\n\n  const handleBlur = () => {\n    if (dice < 1) {\n      setDice(1);\n    }\n  };\n\n  const reset = () => {\n    setResult([]);\n  };\n\n  return (\n    <div>\n      <Card className={classes.root}>\n        <CardContent>\n          <Typography id=\"input-slider\" gutterBottom align=\"left\">\n            Number of Dice\n          </Typography>\n          <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs>\n              <Slider\n                value={typeof dice === \"number\" ? dice : 0}\n                onChange={handleSliderChange}\n                aria-labelledby=\"input-slider\"\n                min={1}\n                max={24}\n              />\n            </Grid>\n            <Grid item>\n              <Input\n                className={classes.input}\n                value={dice}\n                margin=\"dense\"\n                onChange={handleInputChange}\n                onBlur={handleBlur}\n                inputProps={{\n                  step: 5,\n                  min: 1,\n                  max: 100,\n                  type: \"number\",\n                  \"aria-labelledby\": \"input-slider\",\n                }}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <CardActions>\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={rollDice}\n            startIcon={<CasinoIcon />}\n          >\n            Roll\n          </Button>\n          <Button\n            onClick={reset}\n            disabled={result.length < 1 || result === undefined ? true : false}\n          >\n            Clear\n          </Button>\n        </CardActions>\n      </Card>\n\n      <Collapse in={result.length > 0}>\n        <ResultCard result={result} setDice={setDice} num={num} />\n      </Collapse>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DiceRoller />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"15","replacedBy":"16"},{"ruleId":"17","replacedBy":"18"},{"ruleId":"19","severity":1,"message":"20","line":22,"column":10,"nodeType":"21","messageId":"22","endLine":22,"endColumn":23},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"no-unused-vars","'TimerOutlined' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]